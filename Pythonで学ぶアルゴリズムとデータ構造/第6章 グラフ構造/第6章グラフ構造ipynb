{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"第6章グラフ構造ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOXqXmtxE/3qDlMXYltrzEJ"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"D7Xjf92GDHdG","executionInfo":{"status":"ok","timestamp":1609403292297,"user_tz":-540,"elapsed":1558,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["import networkx as nx"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"id":"6_HAxUK0JJd4","executionInfo":{"status":"ok","timestamp":1609403292298,"user_tz":-540,"elapsed":1554,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["graph = nx.Graph()\n","graph.add_edge(5,6)\n","graph.add_edge(6,7)"],"execution_count":33,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"PLcz3UO0JZeu","executionInfo":{"status":"ok","timestamp":1609403292777,"user_tz":-540,"elapsed":2019,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"43398bb6-d931-49e4-a34c-1bba5dd30b2d"},"source":["%matplotlib inline\n","nx.draw_networkx(graph)"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"tXHyGnzUJjlO","executionInfo":{"status":"ok","timestamp":1609403292778,"user_tz":-540,"elapsed":2018,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["import random\n","\n","def generate_graph(n, m):\n","  # n個の頂点とm個の辺を持つグラフを作る\n","  graph_data = [[0] * n for i in range(n)]\n","  # 同じ辺が同一視されるようにsetを用意\n","  edge_set = set()\n","  while len(edge_set) < m:\n","    i, j = random.sample(range(n), 2)\n","    if i > j: i, j = j, i\n","    edge_set.add((i, j))\n","    graph_data[i][j] = graph_data[j][i] = 1\n","  return graph_data, edge_set"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lf_Hqa9BK0W_","executionInfo":{"status":"ok","timestamp":1609403292778,"user_tz":-540,"elapsed":2013,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"7c71ca80-fe9d-4634-e649-8d6075b4dca9"},"source":["random.seed(6)\n","node_num = 16\n","edge_num = 20\n","my_graph , edge_set = generate_graph(node_num, edge_num)\n","edge_set"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{(0, 2),\n"," (0, 4),\n"," (0, 8),\n"," (1, 9),\n"," (2, 5),\n"," (2, 7),\n"," (2, 13),\n"," (3, 12),\n"," (3, 15),\n"," (5, 11),\n"," (5, 13),\n"," (6, 8),\n"," (6, 11),\n"," (6, 13),\n"," (7, 8),\n"," (7, 11),\n"," (8, 10),\n"," (12, 13),\n"," (12, 15),\n"," (13, 14)}"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U3Cc5TECLVl5","executionInfo":{"status":"ok","timestamp":1609403292779,"user_tz":-540,"elapsed":2008,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"588f9735-bda4-4f9c-92e5-a2b8167087d1"},"source":["my_graph"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n"," [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n"," [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],\n"," [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],\n"," [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n"," [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],\n"," [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0],\n"," [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],\n"," [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0],\n"," [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n"," [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n"," [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n"," [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\n"," [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0],\n"," [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n"," [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i-VhUXzaMCqY","executionInfo":{"status":"ok","timestamp":1609403292780,"user_tz":-540,"elapsed":2003,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"b5b71b0a-52d6-4cb3-91ce-3d92e5e486aa"},"source":["from collections import deque\n","\n","queue = deque([])\n","queue.append(1)\n","queue.append(2)\n","queue.append(3)\n","print(queue)"],"execution_count":38,"outputs":[{"output_type":"stream","text":["deque([1, 2, 3])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qYyRBCPKNRYt","executionInfo":{"status":"ok","timestamp":1609403292780,"user_tz":-540,"elapsed":1997,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"dfdd3d95-62bb-47c4-e869-c0833e77a586"},"source":["print(queue.popleft())\n","print(queue)"],"execution_count":39,"outputs":[{"output_type":"stream","text":["1\n","deque([2, 3])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ds3BIZHuNZQw","executionInfo":{"status":"ok","timestamp":1609403292781,"user_tz":-540,"elapsed":1996,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["def breadth_first_search(start, W):\n","  # 隣接行列 W で表現されるグラフについて, start から到達できる node の一覧を返す\n","  # キューをリストに追加する\n","  work_queue = deque([])\n","  visited = set()\n","  # 初期化\n","  work_queue.append(start)\n","  visited.add(start)\n","  while work_queue:\n","    # いまいる頂点\n","    here = work_queue.popleft()\n","    # いまいる頂点から隣接する頂点をすべて処理する\n","    for i, node in enumerate(W[here]):\n","      # 隣接していなければ何もしない\n","      if node == 0: continue\n","      if i not in visited:\n","        work_queue.append(i)\n","        visited.add(i)\n","  return visited"],"execution_count":40,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"na2hgzl8OnHa","executionInfo":{"status":"ok","timestamp":1609403292781,"user_tz":-540,"elapsed":1989,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"3afea2a4-5149-4d52-c02f-33ccfc453b23"},"source":["breadth_first_search(1, my_graph)"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1, 9}"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G9fxmQCuOqWt","executionInfo":{"status":"ok","timestamp":1609403292782,"user_tz":-540,"elapsed":1985,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"489d1e4b-1f94-4a71-d888-0c5bd8fa411d"},"source":["breadth_first_search(10, my_graph)"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"thPBlx9aOw_9","executionInfo":{"status":"ok","timestamp":1609403292783,"user_tz":-540,"elapsed":1984,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["def depth_first_search(start, W):\n","  # リストをスタックとして利用する\n","  work_stack = []\n","  visited = set()\n","  work_stack.append(start)\n","  visited.add(start)\n","  while work_stack:\n","    here = work_stack.pop()\n","    for i, node in enumerate(W[here]):\n","      if node == 0: continue\n","      if i not in visited:\n","        work_stack.append(i)\n","        visited.add(i)\n","  return visited"],"execution_count":43,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-0Ll6YCpQvc7","executionInfo":{"status":"ok","timestamp":1609403292783,"user_tz":-540,"elapsed":1979,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"e3ffde74-1ab5-4d7e-eaea-037db7e18ec8"},"source":["depth_first_search(10, my_graph)"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"markdown","metadata":{"id":"MdezWSHSR7mW"},"source":["# ダイクストラ法"]},{"cell_type":"code","metadata":{"id":"VYteCSa4QyB_","executionInfo":{"status":"ok","timestamp":1609403292784,"user_tz":-540,"elapsed":1978,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["import math\n","import heapq\n","\n","\n","def dijkstra(start, W):\n","  # スタートの頂点と隣接行列を受け取り　, 到達できるすべての頂点への最短距離を返す\n","\n","  # 仮の最短距離を∞に設定\n","  distance_list = [math.inf] * len(W)\n","  # スタートの頂点だけ距離を0にする\n","  distance_list[start] = 0\n","  # 最短距離が確定した頂点\n","  done_list = []\n","  # 次に処理する頂点を決めるためのヒープ\n","  wait_heap = []\n","  for i, d in enumerate(distance_list):\n","    # スタートからの距離, 頂点 というタプルを作る\n","    heapq.heappush(wait_heap, (d, i))\n","  # ヒープが空っぽになるまで処理を続ける\n","  while wait_heap:\n","    p = heapq.heappop(wait_heap)\n","    i = p[1]\n","    if i in done_list:\n","      continue\n","    # この時点でスタートからiへの距離が確定する\n","    done_list.append(i)\n","    # iに隣接するすべての頂点に対する処理\n","    for j, x in enumerate(W[i]):\n","      if x == 1 and j not in done_list:\n","        # 緩和\n","        d = min(distance_list[j], distance_list[i]+x)\n","        distance_list[j] = d\n","        # jへの仮の最短距離をdとしてヒープに追加\n","        heapq.heappush(wait_heap, (d, j))\n","  return distance_list"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X7NaBgDSUQjK","executionInfo":{"status":"ok","timestamp":1609403292785,"user_tz":-540,"elapsed":1973,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"68c96b85-ed25-4bfd-e75d-62a63bc0d163"},"source":["dijkstra(10, my_graph)"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, inf, 3, 5, 3, 4, 2, 2, 1, inf, 0, 3, 4, 3, 4, 5]"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"markdown","metadata":{"id":"oepuSoXVWf5j"},"source":["# Floyd-Warashall法"]},{"cell_type":"code","metadata":{"id":"xkc-TQRcVP0f","executionInfo":{"status":"ok","timestamp":1609403292785,"user_tz":-540,"elapsed":1972,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["def all_pairs_shortest_paths(W):\n","  # 頂点の数\n","  n = len(W)\n","  # 結果を格納する行列を用意する\n","  res = [[0] * n for i in range(n)]\n","  # 用意した行列を初期化する\n","  for i in range(n):\n","    for j in range(i, n):\n","      if i == j:\n","        val = 0\n","      elif W[i][j]:\n","        val = W[i][j]\n","      else:\n","        val = math.inf\n","      res[i][j] = res[j][i] = val\n","  # 動的計画法ですべての頂点間の最短距離を求める\n","  for k in range(n):\n","    for u in range(n):\n","      for v in range(n):\n","        res[u][v] = min(res[u][v], res[u][k] + res[k][v])\n","  return res"],"execution_count":47,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kw4BSMrCYcl-","executionInfo":{"status":"ok","timestamp":1609403292787,"user_tz":-540,"elapsed":1968,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"64f6f892-e87e-4b73-dc09-56103c4b6069"},"source":["all_pairs_shortest_paths(my_graph)"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[0, inf, 1, 4, 1, 2, 2, 2, 1, inf, 2, 3, 3, 2, 3, 4],\n"," [inf, 0, inf, inf, inf, inf, inf, inf, inf, 1, inf, inf, inf, inf, inf, inf],\n"," [1, inf, 0, 3, 2, 1, 2, 1, 2, inf, 3, 2, 2, 1, 2, 3],\n"," [4, inf, 3, 0, 5, 3, 3, 4, 4, inf, 5, 4, 1, 2, 3, 1],\n"," [1, inf, 2, 5, 0, 3, 3, 3, 2, inf, 3, 4, 4, 3, 4, 5],\n"," [2, inf, 1, 3, 3, 0, 2, 2, 3, inf, 4, 1, 2, 1, 2, 3],\n"," [2, inf, 2, 3, 3, 2, 0, 2, 1, inf, 2, 1, 2, 1, 2, 3],\n"," [2, inf, 1, 4, 3, 2, 2, 0, 1, inf, 2, 1, 3, 2, 3, 4],\n"," [1, inf, 2, 4, 2, 3, 1, 1, 0, inf, 1, 2, 3, 2, 3, 4],\n"," [inf, 1, inf, inf, inf, inf, inf, inf, inf, 0, inf, inf, inf, inf, inf, inf],\n"," [2, inf, 3, 5, 3, 4, 2, 2, 1, inf, 0, 3, 4, 3, 4, 5],\n"," [3, inf, 2, 4, 4, 1, 1, 1, 2, inf, 3, 0, 3, 2, 3, 4],\n"," [3, inf, 2, 1, 4, 2, 2, 3, 3, inf, 4, 3, 0, 1, 2, 1],\n"," [2, inf, 1, 2, 3, 1, 1, 2, 2, inf, 3, 2, 1, 0, 1, 2],\n"," [3, inf, 2, 3, 4, 2, 2, 3, 3, inf, 4, 3, 2, 1, 0, 3],\n"," [4, inf, 3, 1, 5, 3, 3, 4, 4, inf, 5, 4, 1, 2, 3, 0]]"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"cfSBFLu9Y_YO"},"source":["# 練習問題"]},{"cell_type":"markdown","metadata":{"id":"hCK1Jr_tZAkR"},"source":["## 6-1"]},{"cell_type":"markdown","metadata":{"id":"Kp2M6RMHawwX"},"source":["路線図(有向グラフ)   \n","頂点 : 駅, 辺 : 線路  \n","\n","人間関係(無向グラフ)  \n","頂点 : 人, 辺 : 関係があるかないか"]},{"cell_type":"markdown","metadata":{"id":"wYUWHKcCTyKo"},"source":["無向グラフとして表現できる事柄はたくさんある。本書でも例に挙げた、人間関係はわかりやすい例だ。経済活動に目を向けると、会社の取引関係もグラフ構造にできる。頂点が会社や個人事業主、辺は取引関係になる。商取引は、受発注で成り立っている。仕事を発注する側はお金を払い仕事を発注する。受注側はお金を受け取り、商品やサービスを提供する。これを向きを持った矢印で表現すれば、有向グラフになる。"]},{"cell_type":"markdown","metadata":{"id":"XdMI50TBT0OA"},"source":["インターネットは、世界中のコンピュータのネットワークなので、グラフ構造として表現できる。頂点はコンピュータ、辺は接続関係としよう。大型のコンピュータ同士は、LANケーブルで物理的に接続されていることが多い。家庭やオフィスで使われるPCやスマートフォンなどは無線通信で接続されていることが多いだろう。どちらにしても、これらのコンピュータが1つの巨大なグラフ構造になっているため、世界中のコンピュータへアクセスすることができる。通信は基本的には双方向なので、これは無向グラフと考えられるが、一般家庭への通信は上り（家庭からプロバイダー）と下り（プロバイダーから一般家庭）の通信速度が違うことが多いので、このことも考慮すると有向グラフとして表現できる。"]},{"cell_type":"markdown","metadata":{"id":"L5817VIPT1wu"},"source":["人は気が付かないうちに、社会や周囲の人々から影響を受けているものだ。これを可視化するのは難しいかも知れないが、似たような事例をグラフで表現することはよくある。学術論文は、その論文を書くために参考にした文献を巻末にまとめる習慣がある。頂点を1つの論文、辺を引用関係にすればグラフができる。引用には向きがあるので、有向グラフとしても表現できる。"]},{"cell_type":"markdown","metadata":{"id":"dXmV2qBYbrnQ"},"source":["## 6-2"]},{"cell_type":"code","metadata":{"id":"NzDPfPfqbsnG","executionInfo":{"status":"ok","timestamp":1609403645002,"user_tz":-540,"elapsed":835,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["def breadth_first_search2(start, W):\n","  # 隣接行列 W で表現されるグラフについて, start から到達できる node の一覧を返す\n","  # キューをリストに追加する\n","  work_queue = deque([])\n","  visited = set()\n","  # 初期化\n","  work_queue.append(start)\n","  visited.add(start)\n","  while work_queue:\n","    # いまいる頂点\n","    here = work_queue.popleft()\n","    # いまいる頂点から隣接する頂点をすべて処理する\n","    for i, node in enumerate(W[here]):\n","      # 隣接していなければ何もしない\n","      if node == 0: continue\n","      if i not in visited:\n","        work_queue.append(i)\n","        visited.add(i)\n","    # 木を出力する\n","    print(visited)\n","  return visited"],"execution_count":52,"outputs":[]},{"cell_type":"code","metadata":{"id":"gYBNPqGgZB18","executionInfo":{"status":"ok","timestamp":1609403646598,"user_tz":-540,"elapsed":890,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["def depth_first_search2(start, W):\n","  # リストをスタックとして利用する\n","  work_stack = []\n","  visited = set()\n","  work_stack.append(start)\n","  visited.add(start)\n","  while work_stack:\n","    here = work_stack.pop()\n","    for i, node in enumerate(W[here]):\n","      if node == 0: continue\n","      if i not in visited:\n","        work_stack.append(i)\n","        visited.add(i)\n","    # 木を出力する\n","    print(visited)\n","  return visited"],"execution_count":53,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VkfG2JbZ7vbS","executionInfo":{"status":"ok","timestamp":1609403676293,"user_tz":-540,"elapsed":963,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"05a4697e-2046-4e3a-df93-ed5ac32e574b"},"source":["breadth_first_search2(10, my_graph)"],"execution_count":54,"outputs":[{"output_type":"stream","text":["{8, 10}\n","{0, 6, 7, 8, 10}\n","{0, 2, 4, 6, 7, 8, 10}\n","{0, 2, 4, 6, 7, 8, 10, 11, 13}\n","{0, 2, 4, 6, 7, 8, 10, 11, 13}\n","{0, 2, 4, 5, 6, 7, 8, 10, 11, 13}\n","{0, 2, 4, 5, 6, 7, 8, 10, 11, 13}\n","{0, 2, 4, 5, 6, 7, 8, 10, 11, 13}\n","{0, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14}\n","{0, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14}\n","{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n","{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n","{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n","{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nFaV8VaS7w4v","executionInfo":{"status":"ok","timestamp":1609403679849,"user_tz":-540,"elapsed":1683,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"5b60213a-d4e4-4fc0-9b7b-1091232f3663"},"source":["depth_first_search2(10, my_graph)"],"execution_count":55,"outputs":[{"output_type":"stream","text":["{8, 10}\n","{0, 6, 7, 8, 10}\n","{0, 2, 6, 7, 8, 10, 11}\n","{0, 2, 5, 6, 7, 8, 10, 11}\n","{0, 2, 5, 6, 7, 8, 10, 11, 13}\n","{0, 2, 5, 6, 7, 8, 10, 11, 12, 13, 14}\n","{0, 2, 5, 6, 7, 8, 10, 11, 12, 13, 14}\n","{0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n","{0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n","{0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n","{0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n","{0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n","{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n","{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15}"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"o5QLmqDhUEFr","executionInfo":{"status":"ok","timestamp":1609410045378,"user_tz":-540,"elapsed":993,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["\n","def breadth_first_search_with_path(start, W):\n","    work_queue = deque([])\n","    visited = set()\n","    # 頂点ペアを保持するリスト\n","    paths = []\n","    work_queue.append(start)\n","    visited.add(start)\n","    while work_queue:\n","        here = work_queue.popleft()\n","        for i, node in enumerate(W[here]):\n","            if node == 0: continue\n","            if i not in visited:\n","                work_queue.append(i)\n","                visited.add(i)\n","                # ここから、次の頂点\n","                paths.append([here, i])\n","    # 関数の戻り値にpathsを追加\n","    return visited, paths"],"execution_count":68,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3zjBTrrsUGdA","executionInfo":{"status":"ok","timestamp":1609410047732,"user_tz":-540,"elapsed":989,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"550b3745-f637-4d5c-82d0-70a6f94d90b0"},"source":["# 1つ目の戻り値は使わないので、_としておく\n","_, paths = breadth_first_search_with_path(0, my_graph)\n","paths"],"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[0, 2],\n"," [0, 4],\n"," [0, 8],\n"," [2, 5],\n"," [2, 7],\n"," [2, 13],\n"," [8, 6],\n"," [8, 10],\n"," [5, 11],\n"," [13, 12],\n"," [13, 14],\n"," [12, 3],\n"," [12, 15]]"]},"metadata":{"tags":[]},"execution_count":69}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"pdo7FW_EUJgJ","executionInfo":{"status":"ok","timestamp":1609410062680,"user_tz":-540,"elapsed":1019,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"4a4263c5-0817-4396-977e-e4e77bf5fab5"},"source":["\n","g = nx.Graph()\n","for u, v in paths:\n","    g.add_edge(u, v)\n","nx.draw_networkx(g)"],"execution_count":71,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"guIOwMQ2fMC_"},"source":["## 6-3"]},{"cell_type":"code","metadata":{"id":"BE1VSNuafM2K","executionInfo":{"status":"ok","timestamp":1609404254508,"user_tz":-540,"elapsed":1024,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["def all_pairs_shortest_paths2(W, m):\n","  # 頂点の数\n","  n = len(W)\n","  # 結果を格納する行列を用意する\n","  res = [[0] * n for i in range(n)]\n","  # 頂点集合をまとめる\n","  edge_set = set()\n","  # 用意した行列を初期化する\n","  for i in range(n):\n","    for j in range(i, n):\n","      if i == j:\n","        val = 0\n","      elif W[i][j]:\n","        val = W[i][j]\n","      else:\n","        val = math.inf\n","      res[i][j] = res[j][i] = val\n","  # 動的計画法ですべての頂点間の最短距離を求める\n","  for k in range(n):\n","    for u in range(n):\n","      for v in range(n):\n","        res[u][v] = min(res[u][v], res[u][k] + res[k][v])\n","  for u in range(n):\n","    for v in range(n):\n","      if res[u][v] <= m:\n","        edge_set.add((u, v))\n","  return res, edge_set"],"execution_count":58,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1C2OICTf85ON","executionInfo":{"status":"ok","timestamp":1609410508738,"user_tz":-540,"elapsed":857,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"4333c150-2b3f-4944-d5b0-56a136c1ab13"},"source":["res_my_graph, res_edge_set = all_pairs_shortest_paths2(my_graph, 1)\n","res_edge_set"],"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{(0, 0),\n"," (0, 2),\n"," (0, 4),\n"," (0, 8),\n"," (1, 1),\n"," (1, 9),\n"," (2, 0),\n"," (2, 2),\n"," (2, 5),\n"," (2, 7),\n"," (2, 13),\n"," (3, 3),\n"," (3, 12),\n"," (3, 15),\n"," (4, 0),\n"," (4, 4),\n"," (5, 2),\n"," (5, 5),\n"," (5, 11),\n"," (5, 13),\n"," (6, 6),\n"," (6, 8),\n"," (6, 11),\n"," (6, 13),\n"," (7, 2),\n"," (7, 7),\n"," (7, 8),\n"," (7, 11),\n"," (8, 0),\n"," (8, 6),\n"," (8, 7),\n"," (8, 8),\n"," (8, 10),\n"," (9, 1),\n"," (9, 9),\n"," (10, 8),\n"," (10, 10),\n"," (11, 5),\n"," (11, 6),\n"," (11, 7),\n"," (11, 11),\n"," (12, 3),\n"," (12, 12),\n"," (12, 13),\n"," (12, 15),\n"," (13, 2),\n"," (13, 5),\n"," (13, 6),\n"," (13, 12),\n"," (13, 13),\n"," (13, 14),\n"," (14, 13),\n"," (14, 14),\n"," (15, 3),\n"," (15, 12),\n"," (15, 15)}"]},"metadata":{"tags":[]},"execution_count":76}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tSgItFCkVwFH","executionInfo":{"status":"ok","timestamp":1609410501760,"user_tz":-540,"elapsed":941,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"525e6018-a22a-4767-e858-d360d2b2ef1a"},"source":["fw_matrix = all_pairs_shortest_paths(my_graph)\n","\n","\n","def near_k(W, k):\n","    \"\"\"ｋ以下の距離にある頂点ペアを返す。\n","    Wはグラフの頂点数と同じサイズの正方行列とする\"\"\"\n","    n = len(W)\n","    res = []\n","    for i in range(n):\n","        for j in range(i+1, n):\n","            if W[i][j] <= k: res.append((i, j))\n","    return res\n","\n","near_k(fw_matrix, 1)\n"],"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(0, 2),\n"," (0, 4),\n"," (0, 8),\n"," (1, 9),\n"," (2, 5),\n"," (2, 7),\n"," (2, 13),\n"," (3, 12),\n"," (3, 15),\n"," (5, 11),\n"," (5, 13),\n"," (6, 8),\n"," (6, 11),\n"," (6, 13),\n"," (7, 8),\n"," (7, 11),\n"," (8, 10),\n"," (12, 13),\n"," (12, 15),\n"," (13, 14)]"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"markdown","metadata":{"id":"OA7aApWzfXo-"},"source":["## 6-4"]},{"cell_type":"code","metadata":{"id":"kgh-l_EyYhpR","executionInfo":{"status":"ok","timestamp":1609409936519,"user_tz":-540,"elapsed":1059,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}}},"source":["def edge_out(W):\n","  n = len(W)\n","  degree_set = set()\n","  degree_num = []\n","  # inf を 0 に変える処理\n","  for i in range(n):\n","    for j in range(n):\n","      if W[i][j] == math.inf:\n","        W[i][j] =0\n","  # 列または行を固定し, 固定した列(行)で合計する\n","  res = 0\n","  for i in range(n):\n","    for j in range(n):\n","      res += W[i][j]\n","    # degree_num.append(res)\n","    degree_set.add((i, res))\n","  return degree_set"],"execution_count":66,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y_-JovEdTazv","executionInfo":{"status":"ok","timestamp":1609409937663,"user_tz":-540,"elapsed":588,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"a079f92c-51a4-4933-ffe9-0bc3f7ce9b5f"},"source":["edge_out(my_graph)"],"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{(0, 3),\n"," (1, 4),\n"," (2, 8),\n"," (3, 10),\n"," (4, 11),\n"," (5, 14),\n"," (6, 17),\n"," (7, 20),\n"," (8, 24),\n"," (9, 25),\n"," (10, 26),\n"," (11, 29),\n"," (12, 32),\n"," (13, 37),\n"," (14, 38),\n"," (15, 40)}"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"UFtNAwhdWBf5","executionInfo":{"status":"ok","timestamp":1609410559400,"user_tz":-540,"elapsed":939,"user":{"displayName":"Kenta Sakamoto","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Nyz2MGZZ39kiUyaZaCcPl_zVSeqXX58IHGC3=s64","userId":"16633723682057900432"}},"outputId":"ec856126-2d00-4c7a-bd55-4f6361e5fcba","colab":{"base_uri":"https://localhost:8080/"}},"source":["\n","def degree(W):\n","    # キーが頂点、値が次数になる辞書を用意\n","    res = {}\n","    for i in range(len(W)):\n","        res[i] = sum(W[i])\n","    return res\n","\n","degree(my_graph)\n"],"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 3,\n"," 1: 1,\n"," 2: 4,\n"," 3: 2,\n"," 4: 1,\n"," 5: 3,\n"," 6: 3,\n"," 7: 3,\n"," 8: 4,\n"," 9: 1,\n"," 10: 1,\n"," 11: 3,\n"," 12: 3,\n"," 13: 5,\n"," 14: 1,\n"," 15: 2}"]},"metadata":{"tags":[]},"execution_count":77}]}]}